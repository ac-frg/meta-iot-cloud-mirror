From 3fe99f466679a9876cd264f7a07f1ca37fe6c15f Mon Sep 17 00:00:00 2001
From: Scott Ware <scott.r.ware@intel.com>
Date: Mon, 22 Apr 2024 09:33:47 +0100
Subject: [PATCH] Use pkg-config to find libs

Upstream-Status: Pending

Signed-off-by: Scott Ware <scott.r.ware@intel.com>
---
 CMakeLists.txt                      | 30 ++++++++++-------------------
 configs/azure_iot_build_rules.cmake |  5 +++++
 2 files changed, 15 insertions(+), 20 deletions(-)

diff --git a/CMakeLists.txt b/CMakeLists.txt
index 00e79a95..eef28e29 100755
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -126,7 +126,11 @@ if(${use_openssl})
     # If OpenSSL::SSL OR OpenSSL::Crypto are not set then you need to run
     # the find package for openssl
     if (NOT TARGET OpenSSL::SSL OR NOT TARGET OpenSSL::Crypto OR NOT ${OPENSSL_INCLUDE_DIR})
-        find_package(OpenSSL REQUIRED)
+        find_package(PkgConfig)
+        if(PKG_CONFIG_FOUND)
+            pkg_check_modules(OPENSSL libssl)
+            pkg_check_modules(CRYPTO libcrypto)
+        endif()
     endif()
 
     # The block below enables the v1 back-compatibility layer in OpenSSL 3,
@@ -136,7 +140,7 @@ if(${use_openssl})
         add_definitions(-DOPENSSL_API_COMPAT=0x10101000L)
     endif()
 
-    include_directories(${OPENSSL_INCLUDE_DIR})
+    include_directories(${OPENSSL_INCLUDE_DIR} ${CRYPTO_INCLUDE_DIR})
 endif()
 
 if(${use_applessl})
@@ -543,25 +547,11 @@ if(${use_http})
         set(aziotsharedutil_target_libs ${aziotsharedutil_target_libs} crypt32 winhttp)
     else()
         if (NOT use_builtin_httpapi)
-
-            # try CMake find_package first
-            find_package(CURL)
-
-            # As mentioned at https://cmake.org/Wiki/CMake_Cross_Compiling the
-            # pkg-config tool can not be used by cmake while cross compiling.
-            if (NOT CMAKE_CROSSCOMPILING)
-                # if find_package didn't work, try pkg-config
-                if(NOT CURL_FOUND)
-                    find_package(PkgConfig)
-                    if(PKG_CONFIG_FOUND)
-                        pkg_check_modules(CURL libcurl)
-                    endif()
-                endif()
+            find_package(PkgConfig)
+            if(PKG_CONFIG_FOUND)
+                pkg_check_modules(CURL libcurl)
             endif()
 
-            set(CURL_FIND_REQUIRED 1)
-            find_package_handle_standard_args(CURL DEFAULT_MSG CURL_LIBRARIES)
-
             include_directories(${CURL_INCLUDE_DIRS})
             set(aziotsharedutil_target_libs ${aziotsharedutil_target_libs} ${CURL_LIBRARIES})
         endif(NOT use_builtin_httpapi)
@@ -602,7 +592,7 @@ if(${use_bearssl})
 endif()
 
 if(${use_openssl})
-    set(aziotsharedutil_target_libs ${aziotsharedutil_target_libs} ${OPENSSL_LIBRARIES})
+    set(aziotsharedutil_target_libs ${aziotsharedutil_target_libs} ${OPENSSL_LIBRARIES} ${CRYPTO_LIBRARIES})
     if (WIN32)
         set(aziotsharedutil_target_libs ${aziotsharedutil_target_libs} crypt32 ws2_32 secur32)
     endif()
diff --git a/configs/azure_iot_build_rules.cmake b/configs/azure_iot_build_rules.cmake
index 655b7f01..747fd256 100644
--- a/configs/azure_iot_build_rules.cmake
+++ b/configs/azure_iot_build_rules.cmake
@@ -77,6 +77,11 @@ elseif(UNIX) #LINUX OR APPLE
         # _XOPEN_SOURCE=500 is required for glibc to expose random and srandom.
         set (CMAKE_C_FLAGS "-D_POSIX_C_SOURCE=200112L -D_XOPEN_SOURCE=500 ${CMAKE_C_FLAGS}")
     endif()
+
+    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -lssl -lcrypto")
+    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -lssl -lcrypto")
+    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -lcurl")
+    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -lcurl")
 endif()
 
 enable_testing()
